{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chivato95/MetNumUN2022II/blob/main/Lab2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%reload_ext fortranmagic"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "k3Y8F-4Nxhap",
        "outputId": "fff72bb2-27bd-4ce3-e022-fa3a6e65eaeb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/fortranmagic.py:147: UserWarning: get_ipython_cache_dir has moved to the IPython.paths module since IPython 4.0.\n",
            "  self._lib_dir = os.path.join(get_ipython_cache_dir(), 'fortran')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "new Promise(function(resolve, reject) {\n",
              "\tvar script = document.createElement(\"script\");\n",
              "\tscript.onload = resolve;\n",
              "\tscript.onerror = reject;\n",
              "\tscript.src = \"https://raw.github.com/marijnh/CodeMirror/master/mode/fortran/fortran.js\";\n",
              "\tdocument.head.appendChild(script);\n",
              "}).then(() => {\n",
              "IPython.config.cell_magic_highlight['magic_fortran'] = {'reg':[/^%%fortran/]};\n",
              "});"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install -U fortran-magic"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HRcvQaJe2FZH",
        "outputId": "3d0a8983-c030-4a10-887f-a3a35f780a7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: fortran-magic in /usr/local/lib/python3.7/dist-packages (0.7)\n",
            "Requirement already satisfied: ipython in /usr/local/lib/python3.7/dist-packages (from fortran-magic) (7.9.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from fortran-magic) (1.21.6)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (57.4.0)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (2.0.10)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (5.1.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (0.2.0)\n",
            "Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (4.8.0)\n",
            "Requirement already satisfied: jedi>=0.10 in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (0.18.1)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (2.6.1)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython->fortran-magic) (4.4.2)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from jedi>=0.10->ipython->fortran-magic) (0.8.3)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython->fortran-magic) (1.15.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython->fortran-magic) (0.2.5)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->ipython->fortran-magic) (0.7.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "autoscroll": false,
        "ein.tags": "worksheet-0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pA_7DFl2w0UW",
        "outputId": "1f300d84-e658-4d40-b259-2147507e9051"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The fortranmagic extension is already loaded. To reload it, use:\n",
            "  %reload_ext fortranmagic\n"
          ]
        }
      ],
      "source": [
        "%matplotlib inline\n",
        "%load_ext fortranmagic\n",
        "\n",
        "import sys; sys.path.append('..')\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "mpl.rc('figure', figsize=(12, 7))\n",
        "\n",
        "ran_the_first_cell = True\n",
        "\n",
        "jan2017 = pd.to_datetime(['2017-01-03 00:00:00+00:00',\n",
        " '2017-01-04 00:00:00+00:00',\n",
        " '2017-01-05 00:00:00+00:00',\n",
        " '2017-01-06 00:00:00+00:00',\n",
        " '2017-01-09 00:00:00+00:00',\n",
        " '2017-01-10 00:00:00+00:00',\n",
        " '2017-01-11 00:00:00+00:00',\n",
        " '2017-01-12 00:00:00+00:00',\n",
        " '2017-01-13 00:00:00+00:00',\n",
        " '2017-01-17 00:00:00+00:00',\n",
        " '2017-01-18 00:00:00+00:00',\n",
        " '2017-01-19 00:00:00+00:00',\n",
        " '2017-01-20 00:00:00+00:00',\n",
        " '2017-01-23 00:00:00+00:00',\n",
        " '2017-01-24 00:00:00+00:00',\n",
        " '2017-01-25 00:00:00+00:00',\n",
        " '2017-01-26 00:00:00+00:00',\n",
        " '2017-01-27 00:00:00+00:00',\n",
        " '2017-01-30 00:00:00+00:00',\n",
        " '2017-01-31 00:00:00+00:00',\n",
        " '2017-02-01 00:00:00+00:00'])\n",
        "calendar = jan2017.values.astype('datetime64[D]')\n",
        "\n",
        "event_dates = pd.to_datetime(['2017-01-06 00:00:00+00:00', \n",
        "                             '2017-01-07 00:00:00+00:00', \n",
        "                             '2017-01-08 00:00:00+00:00']).values.astype('datetime64[D]')\n",
        "event_values = np.array([10, 15, 20])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "ein.tags": "worksheet-0",
        "id": "4PBmBQh4w0Uf"
      },
      "source": [
        "<center>\n",
        "  <h1>The PyData Toolbox</h1>\n",
        "  <h3>Scott Sanderson (Twitter: @scottbsanderson, GitHub: ssanderson)</h3>\n",
        "  <h3><a href=\"https://github.com/ssanderson/pydata-toolbox\">https://github.com/ssanderson/pydata-toolbox</a></h3>\n",
        "</center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "ein.tags": "worksheet-0",
        "id": "1BhhSfL1w0Uh"
      },
      "source": [
        "# About Me:\n",
        "\n",
        "<img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/me.jpg?raw=1\" alt=\"Drawing\" style=\"width: 300px;\"/>\n",
        "\n",
        "- Senior Engineer at [Quantopian](www.quantopian.com)\n",
        "- Background in Mathematics and Philosophy\n",
        "- **Twitter:** [@scottbsanderson](https://twitter.com/scottbsanderson)\n",
        "- **GitHub:** [ssanderson](github.com/ssanderson)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jajQz9-gw0Uj"
      },
      "source": [
        "## Outline\n",
        "\n",
        "- Built-in Data Structures\n",
        "- Numpy `array`\n",
        "- Pandas `Series`/`DataFrame`\n",
        "- Plotting and \"Real-World\" Analyses"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uNqSwk7lw0Uk"
      },
      "source": [
        "# Data Structures"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q0AD38L4w0Uk"
      },
      "source": [
        "> Rule 5. Data dominates. If you've chosen the right data structures and organized things well, the algorithms\n",
        "will almost always be self-evident. Data structures, not algorithms, are central to programming.\n",
        "\n",
        "- *Notes on Programming in C*, by Rob Pike."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nNSO8QVhw0Ul"
      },
      "source": [
        "# Lists"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "2Emkt4AOw0Un"
      },
      "outputs": [],
      "source": [
        "assert ran_the_first_cell, \"Oh noes!\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5MFlN277w0Uo",
        "outputId": "4a849f0b-562b-41ba-bd34-e6d1fee1df55"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 'plasma', 3.0, 4, 5.0, 'six']"
            ]
          },
          "metadata": {},
          "execution_count": 245
        }
      ],
      "source": [
        "l = [1, 'plasma', 3.0, 4, 5.0, \"six\"]\n",
        "l"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "```\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "**My own example k**"
      ],
      "metadata": {
        "id": "ccjtANSCzGla"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "listar = [\"camion\", \"res\", 3, 4,6.9,9, \"plasma\"]\n",
        "listar"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-R3v1XujzGZe",
        "outputId": "e75e2cad-a33d-4767-875c-75dbc0edb922"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['camion', 'res', 3, 4, 6.9, 9, 'plasma']"
            ]
          },
          "metadata": {},
          "execution_count": 246
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YJ2Prvzaw0Up",
        "outputId": "78f08353-f224-4011-fa49-e34945eca0d1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "first: 1\n",
            "second: plasma\n"
          ]
        }
      ],
      "source": [
        "# Lists can be indexed like C-style arrays.\n",
        "first = l[0]\n",
        "second = l[1]\n",
        "print(\"first:\", first)\n",
        "print(\"second:\", second)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+1**"
      ],
      "metadata": {
        "id": "NMnkCMszzcye"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "primero = listar[0]\n",
        "segundo = listar[1]\n",
        "tercero = listar[2]\n",
        "print(\"primero: \", primero)\n",
        "print(\"segundo: \", segundo)\n",
        "print(\"tercero: \", tercero)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kOpT7M01zclu",
        "outputId": "f2a53a34-107b-48fe-e671-3851b628bc3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "primero:  camion\n",
            "segundo:  res\n",
            "tercero:  3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TusQI-7Hw0Uq",
        "outputId": "283eba16-5f0e-4895-f2e3-5a962948b0cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "last: six\n",
            "second to last: 5.0\n"
          ]
        }
      ],
      "source": [
        "# Negative indexing gives elements relative to the end of the list.\n",
        "last = l[-1]\n",
        "penultimate = l[-2]\n",
        "print(\"last:\", last)\n",
        "print(\"second to last:\", penultimate)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+2**"
      ],
      "metadata": {
        "id": "7aOAce-2z94J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ultimo = listar[-1]\n",
        "antepenultimo = listar[-3]\n",
        "print(ultimo, antepenultimo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DN0FnzQHz9sl",
        "outputId": "b13879b5-3ced-459d-9527-c6f55e265595"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "plasma 6.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AvMvhd3mw0Ur",
        "outputId": "4a56ccbd-2f3c-4107-a6f2-ad8adf0bfdc0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['plasma', 3.0]"
            ]
          },
          "metadata": {},
          "execution_count": 251
        }
      ],
      "source": [
        "# Lists can also be sliced, which makes a copy of elements between \n",
        "# start (inclusive) and stop (exclusive)\n",
        "sublist = l[1:3]\n",
        "sublist"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+3**"
      ],
      "metadata": {
        "id": "ZqZRQ9g20ImN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "listar2 = listar[1:3]\n",
        "listar2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0MGlVLD40IcA",
        "outputId": "03de50cb-b345-434f-c4cd-681e8a5ff9ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['res', 3]"
            ]
          },
          "metadata": {},
          "execution_count": 252
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pgf0eEGPw0Us",
        "outputId": "59b4ef5f-fc46-44c8-fa30-ca20104259e7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 'plasma', 3.0, 4]"
            ]
          },
          "metadata": {},
          "execution_count": 253
        }
      ],
      "source": [
        "# l[:N] is equivalent to l[0:N].\n",
        "first_three = l[:4]\n",
        "first_three"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+4**"
      ],
      "metadata": {
        "id": "tF8d3hfa0Sr3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "listadoz = listar[:4]\n",
        "listadoz"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jFw5l5PU0SjD",
        "outputId": "ae6de43d-edb1-4d15-b976-217376442dbe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['camion', 'res', 3, 4]"
            ]
          },
          "metadata": {},
          "execution_count": 254
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "exKvKMVPw0Ut",
        "outputId": "b4bd5ecf-1c94-40dc-d0a1-f6ff9e628b98"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3.0, 4, 5.0, 'six']"
            ]
          },
          "metadata": {},
          "execution_count": 255
        }
      ],
      "source": [
        "# l[3:] is equivalent to l[3:len(l)].\n",
        "after_three = l[2:]\n",
        "after_three"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+5**"
      ],
      "metadata": {
        "id": "ntRC0bVt0bjZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "listadosss = listar[2:]\n",
        "listadosss"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hjS5mBvV0bYj",
        "outputId": "412077f2-a5ed-4073-90ed-9fb247cd15e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3, 4, 6.9, 9, 'plasma']"
            ]
          },
          "metadata": {},
          "execution_count": 256
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n1r2QjqUw0Uu",
        "outputId": "945244a6-c32f-4edb-fbdb-f57bb3a26336"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['b', 'f']"
            ]
          },
          "metadata": {},
          "execution_count": 257
        }
      ],
      "source": [
        "# There's also a third parameter, \"step\", which gets every Nth element.\n",
        "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g','h']\n",
        "l[1:7:4]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+6**"
      ],
      "metadata": {
        "id": "4FaNAq0B0klu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "letrasynumeros = [\"A\",\"B\",\"C\",\"D\",\"E\",1,2,3.141592,4,5.0]\n",
        "letrasynumeros[2:7:4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "glfxcP680kZ6",
        "outputId": "caeea4d7-004c-45f6-f6fb-4ef1ea11b7d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['C', 2]"
            ]
          },
          "metadata": {},
          "execution_count": 258
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YjEgU41Ww0Uu",
        "outputId": "e01817d3-062f-4f1b-ab13-9c6b3cc090ac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']"
            ]
          },
          "metadata": {},
          "execution_count": 259
        }
      ],
      "source": [
        "# This is a cute way to reverse a list.\n",
        "l[::-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+7**"
      ],
      "metadata": {
        "id": "XKEJb_Tw0zni"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "letrasynumeros[::-2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4RuTFI6k0zd_",
        "outputId": "3eb901c6-f1c7-4b10-c198-25237772c1cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[5.0, 3.141592, 1, 'D', 'B']"
            ]
          },
          "metadata": {},
          "execution_count": 260
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ApB6N96Tw0Uv",
        "outputId": "d2203864-1549-480f-f0b5-71b7d441fa27"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before: [1, 2, 3, 4, 5]\n",
            "After: [1, 2, 3, 4, 5, 'Plasma']\n"
          ]
        }
      ],
      "source": [
        "# Lists can be grown efficiently (in O(1) amortized time).\n",
        "l = [1, 2, 3, 4, 5]\n",
        "print(\"Before:\", l)\n",
        "l.append('Plasma')\n",
        "print(\"After:\", l)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+8**"
      ],
      "metadata": {
        "id": "LMnYeqj708va"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "colores = [\"negro\",\"gris\",\"azul\",\"morado\"]\n",
        "print(\"primera lista\", colores)\n",
        "colores.append(\"verde\")\n",
        "print(\"segunda lista\", colores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d1TuUMFF08lk",
        "outputId": "e9efd364-b461-4fa1-afd5-f8c60a95fcaa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "primera lista ['negro', 'gris', 'azul', 'morado']\n",
            "segunda lista ['negro', 'gris', 'azul', 'morado', 'verde']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uep0eBvhw0Uv",
        "outputId": "c59f3dff-f1fe-4d62-976c-0990dda4a343"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3, 6, 9, 12, 15]"
            ]
          },
          "metadata": {},
          "execution_count": 263
        }
      ],
      "source": [
        "# Comprehensions let us perform elementwise computations.\n",
        "l = [1, 2, 3, 4, 5]\n",
        "[x * 3 for x in l]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+9**"
      ],
      "metadata": {
        "id": "EC2SoRq61TLh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "colores = [\"verde\",\"rosado\",\"rojo\",\"verde\"]\n",
        "[x + \" \" \"oscuro\" for x in colores]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YrRz6Dzt1TBI",
        "outputId": "418e600e-528d-4e23-cc06-adb0b58b1707"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['verde oscuro', 'rosado oscuro', 'rojo oscuro', 'verde oscuro']"
            ]
          },
          "metadata": {},
          "execution_count": 264
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "ein.tags": "worksheet-0",
        "id": "RxP_mALuw0Uv"
      },
      "source": [
        "## Review: Python Lists\n",
        "\n",
        "- Zero-indexed sequence of arbitrary Python values.\n",
        "- Slicing syntax: `l[start:stop:step]` copies elements at regular intervals from `start` to `stop`.\n",
        "- Efficient (`O(1)`) appends and removes from end.\n",
        "- Comprehension syntax: `[f(x) for x in l if cond(x)]`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J9hBM6Ucw0Uw"
      },
      "source": [
        "# Dictionaries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "STnKH8xlw0Uw",
        "outputId": "722d976e-f5ba-4ce3-883d-e340e09b34e3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'David': 'Hume', 'Immanuel': 'Kant', 'Bertrand': 'Russell'}"
            ]
          },
          "metadata": {},
          "execution_count": 265
        }
      ],
      "source": [
        "# Dictionaries are key-value mappings.\n",
        "philosophers = {'David': 'Hume', 'Immanuel': 'Kant', 'Bertrand': 'Russell'}\n",
        "philosophers"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+10**"
      ],
      "metadata": {
        "id": "H9jfcPYg2ROd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "familia = {\"ivan\": \"yo\", \"Michael\": \"hermano\", \"marta\" : \"mama\" ,\"ariel\" : \"papa\"}\n",
        "familia"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LCdB7urI2RA5",
        "outputId": "bf9014fe-0b4a-48ab-8bf9-12e1fdc0fff4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ivan': 'yo', 'Michael': 'hermano', 'marta': 'mama', 'ariel': 'papa'}"
            ]
          },
          "metadata": {},
          "execution_count": 266
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cK4X9hlow0Uw",
        "outputId": "41d60c8b-7ff9-4318-8dfc-06b84e903acd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'David': 'Hume',\n",
              " 'Immanuel': 'Kant',\n",
              " 'Bertrand': 'Russell',\n",
              " 'Ludwig': 'Wittgenstein'}"
            ]
          },
          "metadata": {},
          "execution_count": 267
        }
      ],
      "source": [
        "# Like lists, dictionaries are size-mutable.\n",
        "philosophers['Ludwig'] = 'Wittgenstein'\n",
        "philosophers"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+11**"
      ],
      "metadata": {
        "id": "_kfWKWaH2kGq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "familia[\"marcela\"] = \"hermana\"\n",
        "familia"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FK5UKHV-2j9d",
        "outputId": "c865c454-e455-47c7-cd8d-d894c6eb45e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ivan': 'yo',\n",
              " 'Michael': 'hermano',\n",
              " 'marta': 'mama',\n",
              " 'ariel': 'papa',\n",
              " 'marcela': 'hermana'}"
            ]
          },
          "metadata": {},
          "execution_count": 268
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7p2fLujdw0Ux",
        "outputId": "4dd1b580-5fd0-4882-e6e9-ab6cf016410d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Immanuel': 'Kant', 'Bertrand': 'Russell', 'Ludwig': 'Wittgenstein'}"
            ]
          },
          "metadata": {},
          "execution_count": 269
        }
      ],
      "source": [
        "del philosophers['David']\n",
        "philosophers"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+12**"
      ],
      "metadata": {
        "id": "BqtEriGZ3nwM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "del familia[\"ivan\"]\n",
        "familia"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P6OteyQL3nng",
        "outputId": "ae40654d-6fdd-4735-bcbd-cebf00ca4644"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Michael': 'hermano', 'marta': 'mama', 'ariel': 'papa', 'marcela': 'hermana'}"
            ]
          },
          "metadata": {},
          "execution_count": 270
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8lVgI3HSw0Ux",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "9852bae6-fcc8-40c0-e201-4e935c9d6ffd"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-272-180d629fabda>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# No slicing.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mphilosophers\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Bertrand'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'Immanuel'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unhashable type: 'slice'"
          ]
        }
      ],
      "source": [
        "# No slicing.\n",
        "philosophers ['Bertrand':'Immanuel']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+13**"
      ],
      "metadata": {
        "id": "2kOya9aX32yP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "familia[\"martha\":\"hermana\"]"
      ],
      "metadata": {
        "id": "BVV00mo132jO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "outputId": "216a6674-33cf-4603-e334-ddb49c3ee73c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-273-902998936d92>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfamilia\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"martha\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"hermana\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unhashable type: 'slice'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "ein.tags": "worksheet-0",
        "id": "MRLnzOvew0Uy"
      },
      "source": [
        "## Review: Python Dictionaries\n",
        "\n",
        "- Unordered key-value mapping from (almost) arbitrary keys to arbitrary values.\n",
        "- Efficient (`O(1)`) lookup, insertion, and deletion.\n",
        "- No slicing (would require a notion of order)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iPRktU4Kw0Uy"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/pacino.gif?raw=1\" alt=\"Drawing\" style=\"width: 100%;\"/></center>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "SOa-t_7hw0Uy"
      },
      "outputs": [],
      "source": [
        "# Suppose we have some matrices...\n",
        "a = [[1, 2, 3],\n",
        "     [2, 3, 4],\n",
        "     [5, 6, 7],\n",
        "     [1, 1, 1]]\n",
        "\n",
        "b = [[1, 2, 3, 4],\n",
        "     [2, 3, 4, 5]]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+14**"
      ],
      "metadata": {
        "id": "L4MoeVxy4mr_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "matriz1 = [[32,4,36],\n",
        "     [8,139,122],\n",
        "     [134,1446,118]]\n",
        "\n",
        "matriz2 = [[5,3,5],\n",
        "     [7,8,188],]"
      ],
      "metadata": {
        "id": "vp0YY6ct4meY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "PmJ5DexWw0Uz"
      },
      "outputs": [],
      "source": [
        "def matmul(A, B):\n",
        "    \"\"\"Multiply matrix A by matrix B.\"\"\"\n",
        "    rows_out = len(A)\n",
        "    cols_out = len(B[0])\n",
        "    out = [[0 for col in range(cols_out)] for row in range(rows_out)]\n",
        "    \n",
        "    for i in range(rows_out):\n",
        "        for j in range(cols_out):\n",
        "            for k in range(len(B)):\n",
        "                out[i][j] += A[i][k] * B[k][j]\n",
        "    return out"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lYIPKwb2w0Uz"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/gross.gif?raw=1\" alt=\"Drawing\" style=\"width: 50%;\"/></center>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3xx24tauw0Uz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e5e0041-1449-43cd-a573-c0ff2cd99cc5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 36 µs, sys: 3 µs, total: 39 µs\n",
            "Wall time: 45.1 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[5, 8, 11, 14], [8, 13, 18, 23], [17, 28, 39, 50], [3, 5, 7, 9]]"
            ]
          },
          "metadata": {},
          "execution_count": 277
        }
      ],
      "source": [
        "%%time\n",
        "\n",
        "matmul(a, b)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+15**"
      ],
      "metadata": {
        "id": "-o_WLJ-gUo5I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "matmul(matriz1, matriz2)"
      ],
      "metadata": {
        "id": "g2jgJemjUovx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d6a9b7d-7fa2-4b20-ba99-467d8ea2d1de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 30 µs, sys: 2 µs, total: 32 µs\n",
            "Wall time: 37.9 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[188, 128, 912], [1013, 1136, 26172], [10792, 11970, 272518]]"
            ]
          },
          "metadata": {},
          "execution_count": 278
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "73cuStxow0U0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b94d2750-e83a-4dc2-b3df-c7457dbc5901"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[0.27594626076079687,\n",
              "  0.8991047066025769,\n",
              "  0.320440705737594,\n",
              "  0.3216846806207124],\n",
              " [0.7130853493578246,\n",
              "  0.4435799920563157,\n",
              "  0.6570944996987208,\n",
              "  0.18324695316562334],\n",
              " [0.9666600754286915,\n",
              "  0.8585622130562703,\n",
              "  0.11358089314587227,\n",
              "  0.14739275390529216]]"
            ]
          },
          "metadata": {},
          "execution_count": 279
        }
      ],
      "source": [
        "import random\n",
        "def random_matrix(m, n):\n",
        "    out = []\n",
        "    for row in range(m):\n",
        "        out.append([random.random() for _ in range(n)])\n",
        "    return out\n",
        "\n",
        "randm = random_matrix(3, 4)\n",
        "randm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "qfCPBlctw0U0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f2a9efd-de74-4365-c388-bf1a20205279"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 9.31 s, sys: 17.4 ms, total: 9.32 s\n",
            "Wall time: 9.35 s\n"
          ]
        }
      ],
      "source": [
        "%%time\n",
        "randa = random_matrix(600, 100)\n",
        "randb = random_matrix(100, 600)\n",
        "x = matmul(randa, randb)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+16**"
      ],
      "metadata": {
        "id": "CnisINN9Tr_s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "MA = random_matrix(300,140)\n",
        "MB = random_matrix(100,200)\n",
        "Y = matmul(MA, MB)"
      ],
      "metadata": {
        "id": "Cn9aI0DrTr14",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34ea7949-073d-42b8-998e-d4182047def4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 1.34 s, sys: 11.2 ms, total: 1.35 s\n",
            "Wall time: 1.37 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "RxyBwqSLw0U0"
      },
      "outputs": [],
      "source": [
        "# Maybe that's not that bad?  Let's try a simpler case.\n",
        "def python_dot_product(xs, ys):\n",
        "    return sum(x * y for x, y in zip(xs, ys))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "LNkTC9PWw0U1"
      },
      "outputs": [],
      "source": [
        "%%fortran\n",
        "subroutine fortran_dot_product(xs, ys, result)\n",
        "    double precision, intent(in) :: xs(:)\n",
        "    double precision, intent(in) :: ys(:)\n",
        "    double precision, intent(out) :: result\n",
        "    \n",
        "    result = sum(xs * ys)\n",
        "end"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "rN3u_aLsw0U1"
      },
      "outputs": [],
      "source": [
        "list_data = [float(i) for i in range(100000)]\n",
        "array_data = np.array(list_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+17**"
      ],
      "metadata": {
        "id": "eQNOE-CQ2Ev4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos = [float(i) for i in range(100)]\n",
        "array_datos = np.array(datos)"
      ],
      "metadata": {
        "id": "ZNfNiOgh2Em3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s9HlB76tw0U1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03033295-f9b2-45de-c93d-19c8b52bd44d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 14.5 ms, sys: 0 ns, total: 14.5 ms\n",
            "Wall time: 15.4 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "333328333350000.0"
            ]
          },
          "metadata": {},
          "execution_count": 286
        }
      ],
      "source": [
        "%%time\n",
        "python_dot_product(list_data, list_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+18**"
      ],
      "metadata": {
        "id": "Duw2VBEG2RA2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "python_dot_product(datos, datos)"
      ],
      "metadata": {
        "id": "BYuBZqar2Q43",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91594ca8-c4c2-4b84-9b06-67de964f7c79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 25 µs, sys: 1 µs, total: 26 µs\n",
            "Wall time: 31.5 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "328350.0"
            ]
          },
          "metadata": {},
          "execution_count": 287
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mf7vXUI1w0U1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fdc04018-f15e-4d12-ff86-41931643af4f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 184 µs, sys: 11 µs, total: 195 µs\n",
            "Wall time: 205 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "333328333350000.0"
            ]
          },
          "metadata": {},
          "execution_count": 288
        }
      ],
      "source": [
        "%%time\n",
        "fortran_dot_product(array_data, array_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+19**"
      ],
      "metadata": {
        "id": "QNDgHHl_2XIl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "fortran_dot_product(array_datos, array_datos)"
      ],
      "metadata": {
        "id": "oL3hzz4l2W_I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "356afcbb-a5e1-41de-87c8-e161d21e753b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 11 µs, sys: 1 µs, total: 12 µs\n",
            "Wall time: 15 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "328350.0"
            ]
          },
          "metadata": {},
          "execution_count": 289
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yYRHU-JXw0U2"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/sloth.gif?raw=1\" alt=\"Drawing\" style=\"width: 1080px;\"/></center>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RHj-B-J3w0U2"
      },
      "source": [
        "## Why is the Python Version so Much Slower?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xaeEFhOcw0U2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5fb60ff7-56d8-44bf-eb1a-2ac670f05bca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, (4+0j), 9.0, 'redredredred']"
            ]
          },
          "metadata": {},
          "execution_count": 290
        }
      ],
      "source": [
        "# Dynamic typing.\n",
        "def mul_elemwise(xs, ys):\n",
        "    return [x * y for x, y in zip(xs, ys)]\n",
        "\n",
        "mul_elemwise([1, 2, 3, 4], [1, 2 + 0j, 3.0, 'red'])\n",
        "#[type(x) for x in _]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+20**"
      ],
      "metadata": {
        "id": "sxKF-bJ2XK8i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mul_elemwise([2,84,6,87,10], [\"Hola\", 2, \"Adios\"])"
      ],
      "metadata": {
        "id": "SQ8r7P06XKxb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c709de6c-f0ba-4c33-c518-2ee2c7fdcf12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['HolaHola', 168, 'AdiosAdiosAdiosAdiosAdiosAdios']"
            ]
          },
          "metadata": {},
          "execution_count": 291
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ad30o-zaw0U3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ae96af7-9bc0-4e0b-8b3c-59284e216e0f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  1           0 LOAD_NAME                0 (a)\n",
            "              2 LOAD_NAME                1 (b)\n",
            "              4 LOAD_NAME                2 (c)\n",
            "              6 BINARY_MULTIPLY\n",
            "              8 BINARY_ADD\n",
            "             10 RETURN_VALUE\n"
          ]
        }
      ],
      "source": [
        "# Interpretation overhead.\n",
        "source_code = 'a + b * c'\n",
        "bytecode = compile(source_code, '', 'eval')\n",
        "import dis; dis.dis(bytecode)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "01a9Fiimw0U3"
      },
      "source": [
        "## Why is the Python Version so Slow?\n",
        "- Dynamic typing means that every single operation requires dispatching on the input type.\n",
        "- Having an interpreter means that every instruction is fetched and dispatched at runtime.\n",
        "- Other overheads:\n",
        "  - Arbitrary-size integers.\n",
        "  - Reference-counted garbage collection."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a5Kc0BMow0U3"
      },
      "source": [
        "> This is the paradox that we have to work with when we're doing scientific or numerically-intensive Python. What makes Python fast for development -- this high-level, interpreted, and dynamically-typed aspect of the language -- is exactly what makes it slow for code execution.\n",
        "\n",
        "- Jake VanderPlas, [*Losing Your Loops: Fast Numerical Computing with NumPy*](https://www.youtube.com/watch?v=EEUXKG97YRw)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ExeLJkSJw0U3"
      },
      "source": [
        "# What Do We Do?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IboTO95kw0U4"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/runaway.gif?raw=1\" alt=\"Drawing\" style=\"width: 50%;\"/></center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NB2HcyyTw0U4"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/thisisfine.gif?raw=1\" alt=\"Drawing\" style=\"width: 1080px;\"/></center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XzSTgKMIw0U4"
      },
      "source": [
        "- Python is slow for numerical computation because it performs dynamic dispatch on every operation we perform..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "9HsUKW3Lw0U4"
      },
      "source": [
        "- ...but often, we just want to do the same thing over and over in a loop!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DEwRFCSIw0U4"
      },
      "source": [
        "- If we don't need Python's dynamicism, we don't want to pay (much) for it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tuhW7LLAw0U5"
      },
      "source": [
        "- **Idea:** Dispatch **once per operation** instead of **once per element**."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ioChKmPrw0U5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "efa29911-b9cd-4868-fde8-b0e0477b8f19"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 293
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "listadatos = np.array([1, 2, 3, 4])\n",
        "listadatos"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+21**"
      ],
      "metadata": {
        "id": "L8WEH9fsz2Jp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "listadatos = np.array([27, 47, 46, 7, 511, 1545, 4127])\n",
        "listadatos"
      ],
      "metadata": {
        "id": "L2lToYjnz2BN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2834de1e-3ead-4ebc-fbb5-265c8f576462"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  27,   47,   46,    7,  511, 1545, 4127])"
            ]
          },
          "metadata": {},
          "execution_count": 294
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LXTRz14Bw0U5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f64cbee8-d362-471f-bfd2-80899410bc0d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "24"
            ]
          },
          "metadata": {},
          "execution_count": 295
        }
      ],
      "source": [
        "data=12\n",
        "data + data"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+22**"
      ],
      "metadata": {
        "id": "S4fsBSO-0BIs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "listadatos + listadatos"
      ],
      "metadata": {
        "id": "dyS37Ax60A-H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fdcad7d4-bb6a-4ef0-d194-fc45ced324e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  54,   94,   92,   14, 1022, 3090, 8254])"
            ]
          },
          "metadata": {},
          "execution_count": 296
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UWFiePPhw0U5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7f12e9e-51fa-4337-8ed1-e6c96246c7f7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 1.85 ms, sys: 0 ns, total: 1.85 ms\n",
            "Wall time: 1.98 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "333328333350000.0"
            ]
          },
          "metadata": {},
          "execution_count": 297
        }
      ],
      "source": [
        "%%time\n",
        "# Naive dot product\n",
        "(array_data * array_data).sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+23**"
      ],
      "metadata": {
        "id": "L9P9yUhG0GFx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "(array_data * array_data).sum()"
      ],
      "metadata": {
        "id": "fa43wuBN0F9F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6d3cbca-91fc-41b2-a499-35e4ac66ec7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 467 µs, sys: 0 ns, total: 467 µs\n",
            "Wall time: 477 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "333328333350000.0"
            ]
          },
          "metadata": {},
          "execution_count": 298
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "urcq9tlXw0U5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0b092570-6e05-4d7b-bd21-7fb204ac81cc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 1.4 ms, sys: 1.98 ms, total: 3.38 ms\n",
            "Wall time: 2.47 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "333328333350000.0"
            ]
          },
          "metadata": {},
          "execution_count": 299
        }
      ],
      "source": [
        "%%time\n",
        "# Built-in dot product.\n",
        "array_data.dot(array_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+24**"
      ],
      "metadata": {
        "id": "oeHB1kR50UJL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "array_datos.dot(array_datos)"
      ],
      "metadata": {
        "id": "dpF7BDz50UAb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a724e8f-8895-4091-fd21-a87b22b688b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 31 µs, sys: 2 µs, total: 33 µs\n",
            "Wall time: 35.3 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "328350.0"
            ]
          },
          "metadata": {},
          "execution_count": 300
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Aq48eKymw0U6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "06ba2ac3-3121-4cdb-a465-c9dca61e345c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 281 µs, sys: 18 µs, total: 299 µs\n",
            "Wall time: 203 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "333328333350000.0"
            ]
          },
          "metadata": {},
          "execution_count": 301
        }
      ],
      "source": [
        "%%time\n",
        "fortran_dot_product(array_data, array_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+25**"
      ],
      "metadata": {
        "id": "v_hqH-b223k9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "fortran_dot_product(array_datos, array_datos)"
      ],
      "metadata": {
        "id": "7Uog8i_y23U7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b88697ff-be7b-4de3-e6fc-6b2d33366efd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 10 µs, sys: 0 ns, total: 10 µs\n",
            "Wall time: 16.2 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "328350.0"
            ]
          },
          "metadata": {},
          "execution_count": 302
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uT-Dg4W8w0U6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "c4e2019c-13bb-4850-cf5a-48c818c3048c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-304-1ae73c964fd5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Numpy won't allow us to write a string into an int array.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"foo\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object does not support item assignment"
          ]
        }
      ],
      "source": [
        "# Numpy won't allow us to write a string into an int array.\n",
        "data[0] = \"foo\""
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+26**"
      ],
      "metadata": {
        "id": "LNQuE7sb3Ecv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data[3] = \"3.7\""
      ],
      "metadata": {
        "id": "cN35nDMU3ERX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "outputId": "5e728fc6-2fed-4183-cca8-7b0f091fe435"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-308-048b5a87b4cb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"3.7\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object does not support item assignment"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "KNDjC6PZw0U6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "28a8121f-77bd-44ad-ff5e-a64bdc41c72e"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-309-8cdaf5ab44b5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# We also can't grow an array once it's created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'append'"
          ]
        }
      ],
      "source": [
        "# We also can't grow an array once it's created.\n",
        "data.append(3)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+27**"
      ],
      "metadata": {
        "id": "HLFNqDZH3Kdx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos.append(7)"
      ],
      "metadata": {
        "id": "zePpEbiG3KUj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "xqzr4ta_w0U7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "outputId": "c519fd17-6986-4fc1-f4e1-5634fdeea268"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-314-b9b7c1616d09>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# We **can** reshape an array though.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtwo_by_two\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtwo_by_two\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'array'"
          ]
        }
      ],
      "source": [
        "# We **can** reshape an array though.\n",
        "two_by_two = data.array(2, 2)\n",
        "two_by_two"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 29**"
      ],
      "metadata": {
        "id": "ICXkQo1d3jhe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "uno = primos.reshape(7,7)\n",
        "uno"
      ],
      "metadata": {
        "id": "Y1eu3Wsu3jPn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "af847725-485b-4a8c-d75b-44205b7e15e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-315-f9f3b6bb2bde>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0muno\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprimos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0muno\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'primos' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EUwlDkb4w0U7"
      },
      "source": [
        "Numpy arrays are:\n",
        "\n",
        "- Fixed-type"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vGk8Iqvjw0U7"
      },
      "source": [
        "- Size-immutable"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F8aCMfZYw0U7"
      },
      "source": [
        "- Multi-dimensional"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eYoF2qVAw0U7"
      },
      "source": [
        "- Fast\\*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-AcFGhN7w0U7"
      },
      "source": [
        "\\* If you use them correctly."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kuqSu4Guw0U7"
      },
      "source": [
        "# What's in an Array?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KtJmXHvIw0U8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7299ea9b-5bf6-42d4-95e0-a5ed090fead3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Array:\n",
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "===========\n",
            "DType: int16\n",
            "Shape: (2, 3)\n",
            "Strides: (6, 2)\n",
            "Data: b'\\x01\\x00\\x02\\x00\\x03\\x00\\x04\\x00\\x05\\x00\\x06\\x00'\n"
          ]
        }
      ],
      "source": [
        "arr = np.array([1, 2, 3, 4, 5, 6], dtype='int16').reshape(2, 3)\n",
        "print(\"Array:\\n\", arr, sep='')\n",
        "print(\"===========\")\n",
        "print(\"DType:\", arr.dtype)\n",
        "print(\"Shape:\", arr.shape)\n",
        "print(\"Strides:\", arr.strides)\n",
        "print(\"Data:\", arr.data.tobytes())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+29**"
      ],
      "metadata": {
        "id": "sQAVz5zg3xht"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([1,3,5,7,9,11], dtype='int32').reshape(2, 3)\n",
        "print(\"Array:\\n\", arr, sep='')\n",
        "print(\"===========\")\n",
        "print(\"DType:\", arr.dtype)\n",
        "print(\"Shape:\", arr.shape)\n",
        "print(\"Strides:\", arr.strides)\n",
        "print(\"Data:\", arr.data.tobytes())"
      ],
      "metadata": {
        "id": "uWNHAr-M3xXR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4bbd9497-2928-4c31-cbed-0279a7b97bba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Array:\n",
            "[[ 1  3  5]\n",
            " [ 7  9 11]]\n",
            "===========\n",
            "DType: int32\n",
            "Shape: (2, 3)\n",
            "Strides: (12, 4)\n",
            "Data: b'\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x0b\\x00\\x00\\x00'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eWWvZ_kxw0U8"
      },
      "source": [
        "# Core Operations\n",
        "\n",
        "- Vectorized **ufuncs** for elementwise operations.\n",
        "- Fancy indexing and masking for selection and filtering.\n",
        "- Aggregations across axes.\n",
        "- Broadcasting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cukgBI6nw0U8"
      },
      "source": [
        "# UFuncs\n",
        "\n",
        "UFuncs (universal functions) are functions that operate elementwise on one or more arrays."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nkQOrEftw0U8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64768c73-7f2c-4f96-d3b5-236c7da53955"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4],\n",
              "       [ 5,  6,  7,  8,  9],\n",
              "       [10, 11, 12, 13, 14]])"
            ]
          },
          "metadata": {},
          "execution_count": 318
        }
      ],
      "source": [
        "data = np.arange(15).reshape(3, 5)\n",
        "data"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+30**"
      ],
      "metadata": {
        "id": "uUGGT-w14E_f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos1 = np.arange(24).reshape(4,6)\n",
        "datos1"
      ],
      "metadata": {
        "id": "76omAyHb4E3x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95917adb-911d-44c3-cd9d-ed082dc71ca6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4,  5],\n",
              "       [ 6,  7,  8,  9, 10, 11],\n",
              "       [12, 13, 14, 15, 16, 17],\n",
              "       [18, 19, 20, 21, 22, 23]])"
            ]
          },
          "metadata": {},
          "execution_count": 320
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0vKxW6t0w0U8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e55266af-7d76-4524-bc7b-a9cc18717f82"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  0,   1,   4,   9,  16],\n",
              "       [ 25,  36,  49,  64,  81],\n",
              "       [100, 121, 144, 169, 196]])"
            ]
          },
          "metadata": {},
          "execution_count": 321
        }
      ],
      "source": [
        "# Binary operators.\n",
        "data * data"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+31**"
      ],
      "metadata": {
        "id": "R8C1bNTh4ZL6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos1 * datos1"
      ],
      "metadata": {
        "id": "hEztQVsX4Y66",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "92a0060c-a615-4e37-e8f6-85825c9f356c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  0,   1,   4,   9,  16,  25],\n",
              "       [ 36,  49,  64,  81, 100, 121],\n",
              "       [144, 169, 196, 225, 256, 289],\n",
              "       [324, 361, 400, 441, 484, 529]])"
            ]
          },
          "metadata": {},
          "execution_count": 322
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oqLbW2Zmw0U8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ae5155c-6bff-48a5-a8c5-81ac6f6db493"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.        , 1.        , 1.41421356, 1.73205081, 2.        ],\n",
              "       [2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ],\n",
              "       [3.16227766, 3.31662479, 3.46410162, 3.60555128, 3.74165739]])"
            ]
          },
          "metadata": {},
          "execution_count": 323
        }
      ],
      "source": [
        "# Unary functions.\n",
        "np.sqrt(data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+32**"
      ],
      "metadata": {
        "id": "3m2xMLRN4fAF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.sqrt(datos1)"
      ],
      "metadata": {
        "id": "qMgjtG8e4e0m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80a9d5d9-338f-4cbf-da63-0b85d3655b2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n",
              "        2.23606798],\n",
              "       [2.44948974, 2.64575131, 2.82842712, 3.        , 3.16227766,\n",
              "        3.31662479],\n",
              "       [3.46410162, 3.60555128, 3.74165739, 3.87298335, 4.        ,\n",
              "        4.12310563],\n",
              "       [4.24264069, 4.35889894, 4.47213595, 4.58257569, 4.69041576,\n",
              "        4.79583152]])"
            ]
          },
          "metadata": {},
          "execution_count": 324
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "22XmWh0vw0U9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8c21fb3-666e-4e3c-cd68-16aaf888f1fe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ True, False, False,  True, False],\n",
              "       [False,  True, False, False,  True],\n",
              "       [False, False,  True, False, False]])"
            ]
          },
          "metadata": {},
          "execution_count": 325
        }
      ],
      "source": [
        "# Comparison operations\n",
        "(data % 3) == 0"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+33**"
      ],
      "metadata": {
        "id": "6RBbAU4t4n--"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(datos1 % 10) == 0"
      ],
      "metadata": {
        "id": "wjnOM3l34n3z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f91f5b3-9448-47b0-bab7-7347dc38ba81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ True, False, False, False, False, False],\n",
              "       [False, False, False, False,  True, False],\n",
              "       [False, False, False, False, False, False],\n",
              "       [False, False,  True, False, False, False]])"
            ]
          },
          "metadata": {},
          "execution_count": 327
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3_vQ4L8gw0U9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f402240-8ba7-4beb-a1fe-310d92d7fa04"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ True, False, False, False, False],\n",
              "       [False,  True, False, False, False],\n",
              "       [False, False,  True, False, False]])"
            ]
          },
          "metadata": {},
          "execution_count": 328
        }
      ],
      "source": [
        "# Boolean combinators.\n",
        "((data % 2) == 0) & ((data % 3) == 0)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+34**"
      ],
      "metadata": {
        "id": "uoCED4V14yVI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "((datos1 % 5) == 1) & ((datos1 % 2) == 0)"
      ],
      "metadata": {
        "id": "HSpw0Okz4yOn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fac8f820-f5ca-4cea-ca20-27363044f8d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[False, False, False, False, False, False],\n",
              "       [ True, False, False, False, False, False],\n",
              "       [False, False, False, False,  True, False],\n",
              "       [False, False, False, False, False, False]])"
            ]
          },
          "metadata": {},
          "execution_count": 329
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sWx0xSyXw0U9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "247ee8c8-4ec1-46d5-a544-370d29aa4f08"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 30,  80, 130],\n",
              "       [ 80, 255, 430],\n",
              "       [130, 430, 730]])"
            ]
          },
          "metadata": {},
          "execution_count": 330
        }
      ],
      "source": [
        "# as of python 3.5, @ is matrix-multiply\n",
        "data @ data.T"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+35**"
      ],
      "metadata": {
        "id": "j2pGxhMT5DmM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos1 @ datos1.T"
      ],
      "metadata": {
        "id": "P1N5BCkq5DbS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ce34bef-c5a9-410a-bcc7-5291deeb80ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  55,  145,  235,  325],\n",
              "       [ 145,  451,  757, 1063],\n",
              "       [ 235,  757, 1279, 1801],\n",
              "       [ 325, 1063, 1801, 2539]])"
            ]
          },
          "metadata": {},
          "execution_count": 331
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ekq11cehw0U9"
      },
      "source": [
        "# UFuncs Review\n",
        "\n",
        "- UFuncs provide efficient elementwise operations applied across one or more arrays.\n",
        "- Arithmetic Operators (`+`, `*`, `/`)\n",
        "- Comparisons (`==`, `>`, `!=`)\n",
        "- Boolean Operators (`&`, `|`, `^`)\n",
        "- Trigonometric Functions (`sin`, `cos`)\n",
        "- Transcendental Functions (`exp`, `log`)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WX1cWNeOw0U9"
      },
      "source": [
        "# Selections"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QXPbAk-Kw0U9"
      },
      "source": [
        "We often want to perform an operation on just a subset of our data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rfYrGlSWw0U9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35988b38-32eb-4435-a605-703db94df4fa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.34185385, 0.64251645, 0.86575984, 0.98468459,\n",
              "       0.98496101, 0.8665558 , 0.64373604, 0.34335012, 0.00159265])"
            ]
          },
          "metadata": {},
          "execution_count": 332
        }
      ],
      "source": [
        "sines = np.sin(np.linspace(0, 3.14, 10))\n",
        "cosines = np.cos(np.linspace(0, 3.14, 10))\n",
        "sines"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+36**"
      ],
      "metadata": {
        "id": "deyHStix5p3b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cosenos = np.tan(np.linspace(0, 3.14, 8))"
      ],
      "metadata": {
        "id": "_u3TMI1o5psI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IRQl5HiXw0U-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "929853cb-a5bd-49c5-cc3b-452dd6162160"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "metadata": {},
          "execution_count": 334
        }
      ],
      "source": [
        "# Slicing works with the same semantics as Python lists.\n",
        "sines[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+37**"
      ],
      "metadata": {
        "id": "_nVoE9oM56Dj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cosenos[2]"
      ],
      "metadata": {
        "id": "ogi1cUHU554U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44f6926c-c22e-416f-e941-4b0082133e6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.2527904427269019"
            ]
          },
          "metadata": {},
          "execution_count": 409
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "er038GqIw0U-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "812abd2b-fbd4-4720-dbcd-92940acd6b8b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.34185385, 0.64251645])"
            ]
          },
          "metadata": {},
          "execution_count": 410
        }
      ],
      "source": [
        "sines[:3]  # First three elements  "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+38**"
      ],
      "metadata": {
        "id": "uQVE2uUM6LJM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cosenos[:4]"
      ],
      "metadata": {
        "id": "SxA7aJ0Y6LAW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80564552-a10d-4854-95d8-1c8dab3a4d71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.48129436, 1.25279044, 4.36754249])"
            ]
          },
          "metadata": {},
          "execution_count": 337
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EgthRb5ew0U-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "28beda6c-5016-400e-8c61-93a325cc6145"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.98496101, 0.8665558 , 0.64373604, 0.34335012, 0.00159265])"
            ]
          },
          "metadata": {},
          "execution_count": 338
        }
      ],
      "source": [
        "sines[5:]  # Elements from 5 on."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+39**"
      ],
      "metadata": {
        "id": "qwjwAivr6Rwm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cosenos[1:]"
      ],
      "metadata": {
        "id": "8-smuGvW6RlT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bfd65747-b3ef-49d6-97e3-35d2f027d581"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 4.81294362e-01,  1.25279044e+00,  4.36754249e+00, -4.39973968e+00,\n",
              "       -1.25689093e+00, -4.83257451e-01, -1.59265494e-03])"
            ]
          },
          "metadata": {},
          "execution_count": 339
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VIIiMncLw0U-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e3863f3-5334-44ce-df53-d0ad0474eda0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.64251645, 0.98468459, 0.8665558 , 0.34335012])"
            ]
          },
          "metadata": {},
          "execution_count": 340
        }
      ],
      "source": [
        "sines[::2]  # Every other element."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+40**"
      ],
      "metadata": {
        "id": "fLVUtgVT6W02"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sines[::6]"
      ],
      "metadata": {
        "id": "RFv8W70d6Wsm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e45bc136-6fa7-4f71-905d-925cb02f649d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.       , 0.8665558])"
            ]
          },
          "metadata": {},
          "execution_count": 341
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kGdRVPv3w0U-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95fd5e3c-1f99-4619-945f-cee52a66e21e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sines:\n",
            " [0.         0.34185385 0.64251645 0.86575984 0.98468459 0.98496101\n",
            " 0.8665558  0.64373604 0.34335012 0.00159265]\n",
            "sines > 0.5:\n",
            " [False False  True  True  True  True  True  True False False]\n",
            "sines[sines > 0.5]:\n",
            " [0.64251645 0.86575984 0.98468459 0.98496101 0.8665558  0.64373604]\n"
          ]
        }
      ],
      "source": [
        "# More interesting: we can index with boolean arrays to filter by a predicate.\n",
        "print(\"sines:\\n\", sines)\n",
        "print(\"sines > 0.5:\\n\", sines > 0.5)\n",
        "print(\"sines[sines > 0.5]:\\n\", sines[sines > 0.5])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+41**"
      ],
      "metadata": {
        "id": "K5tAVPg86hHL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(sines[sines > 0.5])"
      ],
      "metadata": {
        "id": "Po8y7WYt6g63",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2460cd34-c0c0-459f-f028-53edcb8e069d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.64251645 0.86575984 0.98468459 0.98496101 0.8665558  0.64373604]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qtwCmtMSw0U_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "980d9396-7352-457c-b562-6d476b24ea7a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.         0.34185385 0.64251645 0.86575984 0.98468459 0.98496101\n",
            " 0.8665558  0.64373604 0.34335012 0.00159265]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.98468459, 0.64373604])"
            ]
          },
          "metadata": {},
          "execution_count": 344
        }
      ],
      "source": [
        "# We index with lists/arrays of integers to select values at those indices.\n",
        "print(sines)\n",
        "sines[[0, 4, 7]]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+42**"
      ],
      "metadata": {
        "id": "Aq4ni2fa6p3n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sines[[3,4,5]]"
      ],
      "metadata": {
        "id": "SePvAdWe6ps7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0327440c-2c37-4ac3-9e99-077d4b8134ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.86575984, 0.98468459, 0.98496101])"
            ]
          },
          "metadata": {},
          "execution_count": 345
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "63DugNBCw0U_"
      },
      "outputs": [],
      "source": [
        "# Index arrays are often used for sorting one or more arrays.\n",
        "unsorted_data = np.array([1, 3, 2, 12, -1, 5, 2])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+43**"
      ],
      "metadata": {
        "id": "2fGhz9x47BNW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "aleatorio = np.array([1,4,8,7,9,12,13,15])"
      ],
      "metadata": {
        "id": "CJJQ48VV7BCv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KdIN7WL2w0U_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95715be9-f1b4-465a-c192-eef3cabe4cd6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4, 0, 2, 6, 1, 5, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 348
        }
      ],
      "source": [
        "sort_indices = np.argsort(unsorted_data)\n",
        "sort_indices"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+44**"
      ],
      "metadata": {
        "id": "UwMrH8bk7_l2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "orden = np.argsort(aleatorio)\n",
        "orden"
      ],
      "metadata": {
        "id": "37E7woaU7_c3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "485414cf-033d-4aa5-c77c-d9511bfc7f0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 3, 2, 4, 5, 6, 7])"
            ]
          },
          "metadata": {},
          "execution_count": 349
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BPN-29slw0U_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e2241eaf-5e0b-481a-9ec5-e2a303c31da8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-1,  1,  2,  2,  3,  5, 12])"
            ]
          },
          "metadata": {},
          "execution_count": 350
        }
      ],
      "source": [
        "unsorted_data[sort_indices]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+45**"
      ],
      "metadata": {
        "id": "pbz8DW0m8qpH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "aleatorio[orden]"
      ],
      "metadata": {
        "id": "z1a6X69J8qch",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "974b8047-912b-49f7-d0a0-2b7f2a8c1f8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1,  4,  7,  8,  9, 12, 13, 15])"
            ]
          },
          "metadata": {},
          "execution_count": 351
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "_HVsGA_Xw0U_"
      },
      "outputs": [],
      "source": [
        "market_caps = np.array([12, 6, 10, 5, 6])  # Presumably in dollars?\n",
        "assets = np.array(['A', 'B', 'C', 'D', 'E'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+46**"
      ],
      "metadata": {
        "id": "E8TyCirE8dyc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num = np.array([555,556,557,558,65])\n",
        "let = np.array(['A','B','C','D','E'])"
      ],
      "metadata": {
        "id": "j5LZHOsW8don"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KvTn_mbJw0U_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a076844-5e11-4d0d-d0b8-df1c732a694f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['D', 'B', 'E', 'C', 'A'], dtype='<U1')"
            ]
          },
          "metadata": {},
          "execution_count": 354
        }
      ],
      "source": [
        "# Sort assets by market cap by using the permutation that would sort market caps on ``assets``.\n",
        "sort_by_mcap = np.argsort(market_caps)\n",
        "assets[sort_by_mcap]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+47**"
      ],
      "metadata": {
        "id": "zpd5rfFQ9SqA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sorts = np.argsort(num)\n",
        "let[sorts]"
      ],
      "metadata": {
        "id": "Nlg1F_sk9Sg6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f2a1e16-48ad-40a8-e6eb-a5aa9e5a75ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['E', 'A', 'B', 'C', 'D'], dtype='<U1')"
            ]
          },
          "metadata": {},
          "execution_count": 355
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "OhB0hE-Tw0VA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6de2cb06-91ab-418b-d934-3d69b5a0faf6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dates:\n",
            " array(['2017-01-06', '2017-01-07', '2017-01-08'], dtype='datetime64[D]')\n",
            "Values:\n",
            " array([10, 15, 20])\n",
            "Calendar:\n",
            " array(['2017-01-03', '2017-01-04', '2017-01-05', '2017-01-06',\n",
            "       '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12',\n",
            "       '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19',\n",
            "       '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25',\n",
            "       '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31',\n",
            "       '2017-02-01'], dtype='datetime64[D]')\n"
          ]
        }
      ],
      "source": [
        "# Indexers are also useful for aligning data.\n",
        "print(\"Dates:\\n\", repr(event_dates))\n",
        "print(\"Values:\\n\", repr(event_values))\n",
        "print(\"Calendar:\\n\", repr(calendar))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yOUk7b-nw0VA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "85f1f46b-2daf-412d-be6d-fe70fa63dfc8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Raw Dates: ['2017-01-06' '2017-01-07' '2017-01-08']\n",
            "Indices: [3 4 4]\n",
            "Forward-Filled Dates: ['2017-01-06' '2017-01-09' '2017-01-09']\n"
          ]
        }
      ],
      "source": [
        "print(\"Raw Dates:\", event_dates)\n",
        "print(\"Indices:\", calendar.searchsorted(event_dates))\n",
        "print(\"Forward-Filled Dates:\", calendar[calendar.searchsorted(event_dates)])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZJmnFugLw0VA"
      },
      "source": [
        "On multi-dimensional arrays, we can slice along each axis independently."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cBPL4-dgw0VA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b79b87ab-9f74-4992-9220-6a093298dbc1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4],\n",
              "       [ 5,  6,  7,  8,  9],\n",
              "       [10, 11, 12, 13, 14],\n",
              "       [15, 16, 17, 18, 19],\n",
              "       [20, 21, 22, 23, 24]])"
            ]
          },
          "metadata": {},
          "execution_count": 358
        }
      ],
      "source": [
        "data = np.arange(25).reshape(5, 5)\n",
        "data"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+48**"
      ],
      "metadata": {
        "id": "XlofP01A-Zfz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos2 = np.arange(36).reshape(6, 6)\n",
        "datos2"
      ],
      "metadata": {
        "id": "p8T4kfU5-ZWX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8bf54ee7-0864-4357-8da6-a7a709c1d295"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4,  5],\n",
              "       [ 6,  7,  8,  9, 10, 11],\n",
              "       [12, 13, 14, 15, 16, 17],\n",
              "       [18, 19, 20, 21, 22, 23],\n",
              "       [24, 25, 26, 27, 28, 29],\n",
              "       [30, 31, 32, 33, 34, 35]])"
            ]
          },
          "metadata": {},
          "execution_count": 359
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "URXdlXSlw0VA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "25c8e701-ff27-4a00-febe-74124cf72103"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 1],\n",
              "       [5, 6]])"
            ]
          },
          "metadata": {},
          "execution_count": 360
        }
      ],
      "source": [
        "data[:2, :2]  # First two rows and first two columns."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+49**"
      ],
      "metadata": {
        "id": "psR8xlRP-qyY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos2[:3, :7]"
      ],
      "metadata": {
        "id": "Xcl-Bo88-qph",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6bdbd7e8-3a8d-4e3f-bcb3-fa0ade6fc415"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4,  5],\n",
              "       [ 6,  7,  8,  9, 10, 11],\n",
              "       [12, 13, 14, 15, 16, 17]])"
            ]
          },
          "metadata": {},
          "execution_count": 412
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "suMeipaqw0VA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f718ab45-f342-4c73-c5af-cb6454bca937"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  9],\n",
              "       [10, 19]])"
            ]
          },
          "metadata": {},
          "execution_count": 413
        }
      ],
      "source": [
        "data[:2, [0, -1]]  # First two rows, first and last columns."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+50**"
      ],
      "metadata": {
        "id": "Z2xc9fXk-0NB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos2[:1, [3, -2]]"
      ],
      "metadata": {
        "id": "NMuTmZQ7-0Cq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "105848f6-6896-46bb-a04d-9705dc3f3cb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[3, 4]])"
            ]
          },
          "metadata": {},
          "execution_count": 416
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LFUotF3Nw0VB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43be7c2b-4f44-4f0e-a971-25888c087e75"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n",
              "       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n",
              "       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]])"
            ]
          },
          "metadata": {},
          "execution_count": 417
        }
      ],
      "source": [
        "data[(data[:, 0] % 2) == 0]  # Rows where the first column is divisible by two."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+51**"
      ],
      "metadata": {
        "id": "nLLrBZBW_BYV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos2[(datos2[:, 2] % 5) == 0]"
      ],
      "metadata": {
        "id": "nHPQFyjD_ABc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ac0250e-e80e-409e-b5fa-973716992deb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[18, 19, 20, 21, 22, 23]])"
            ]
          },
          "metadata": {},
          "execution_count": 418
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "954pPNIkw0VB"
      },
      "source": [
        "# Selections Review\n",
        "\n",
        "- Indexing with an integer removes a dimension.\n",
        "- Slicing operations work on Numpy arrays the same way they do on lists.\n",
        "- Indexing with a boolean array filters to True locations.\n",
        "- Indexing with an integer array selects indices along an axis.\n",
        "- Multidimensional arrays can apply selections independently along different axes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_S1i-H_bw0VB"
      },
      "source": [
        "## Reductions\n",
        "\n",
        "Functions that reduce an array to a scalar."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aEoXeuxqw0VB"
      },
      "source": [
        "$Var(X) = \\frac{1}{N}\\sqrt{\\sum_{i=1}^N (x_i - \\bar{x})^2}$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "oNw4Lvg7w0VB"
      },
      "outputs": [],
      "source": [
        "def variance(x):\n",
        "    return ((x - x.mean()) ** 2).sum() / len(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lP04I1exw0VB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ce0c202-4998-4baf-8dc8-00bb12f4909c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0255895017932193"
            ]
          },
          "metadata": {},
          "execution_count": 420
        }
      ],
      "source": [
        "variance(np.random.standard_normal(1000))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+52**"
      ],
      "metadata": {
        "id": "LoEAHFau_g3N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "variance(np.random.standard_normal(500))"
      ],
      "metadata": {
        "id": "Fsdqzciy_gpO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b95b4a4b-ef2f-4d84-bb91-c437dcde8e46"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.11668384255825"
            ]
          },
          "metadata": {},
          "execution_count": 421
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0XDGC9xxw0VC"
      },
      "source": [
        "- `sum()` and `mean()` are both **reductions**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dcgcs7m_w0VC"
      },
      "source": [
        "- In the simplest case, we use these to reduce an entire array into a single value..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ie02N9o5w0VC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "929e0aca-b489-4c31-f3e2-3a97abb7ab95"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14.5"
            ]
          },
          "metadata": {},
          "execution_count": 422
        }
      ],
      "source": [
        "data = np.arange(30)\n",
        "data.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+53**"
      ],
      "metadata": {
        "id": "Q6Og5s8s_yOw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos3 = np.arange(55)\n",
        "datos3.mean()"
      ],
      "metadata": {
        "id": "ImOuRTUo_x-R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ed9ef37-94ab-4ec7-89a5-4d313b523fc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "27.0"
            ]
          },
          "metadata": {},
          "execution_count": 423
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qvD14HH7w0VC"
      },
      "source": [
        "- ...but we can do more interesting things with multi-dimensional arrays."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jf1zr69Aw0VC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcd5af19-7e98-46e4-edca-bf928d82d78d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n",
              "       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n",
              "       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]])"
            ]
          },
          "metadata": {},
          "execution_count": 424
        }
      ],
      "source": [
        "data = np.arange(30).reshape(3, 10)\n",
        "data"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+54**"
      ],
      "metadata": {
        "id": "YoXTRVka_6SA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos3 = np.arange(55).reshape(5,11)\n",
        "datos3"
      ],
      "metadata": {
        "id": "Ny0qRZi1_51q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5d4e3aa5-b583-4630-f30c-c528de226399"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10],\n",
              "       [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n",
              "       [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],\n",
              "       [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],\n",
              "       [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]])"
            ]
          },
          "metadata": {},
          "execution_count": 425
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2X67c7-dw0VD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22e19bb6-0ff7-4dc9-b091-ca8d4bdab494"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14.5"
            ]
          },
          "metadata": {},
          "execution_count": 426
        }
      ],
      "source": [
        "data.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+55**"
      ],
      "metadata": {
        "id": "-Nf7Y2yaAECB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos3.mean()"
      ],
      "metadata": {
        "id": "D9OGD0z1AD6y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78b38beb-0e80-4ad4-fce8-1403407e3be7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "27.0"
            ]
          },
          "metadata": {},
          "execution_count": 427
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "46e02QALw0VD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ad97ec9-2b88-49dd-b2e0-32cded728494"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10., 11., 12., 13., 14., 15., 16., 17., 18., 19.])"
            ]
          },
          "metadata": {},
          "execution_count": 428
        }
      ],
      "source": [
        "data.mean(axis=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+56**"
      ],
      "metadata": {
        "id": "mmxxQsvzALcR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos3.mean(axis = 0)"
      ],
      "metadata": {
        "id": "h8jms9bDALIi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7d01e32-524e-41d8-eaa3-050cceedd3b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32.])"
            ]
          },
          "metadata": {},
          "execution_count": 429
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bWTKLSmQw0VD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "832681d4-597a-4f79-cdb3-de4eb8ac0aab"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 4.5, 14.5, 24.5])"
            ]
          },
          "metadata": {},
          "execution_count": 430
        }
      ],
      "source": [
        "data.mean(axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+57**"
      ],
      "metadata": {
        "id": "yyEmHsSLAR5L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos3.mean(axis = 0)"
      ],
      "metadata": {
        "id": "GponRsL4ARxW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7aedd522-16a6-4ef6-8e35-34f3c88cb07a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32.])"
            ]
          },
          "metadata": {},
          "execution_count": 431
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HhAchLC8w0VE"
      },
      "source": [
        "## Reductions Review\n",
        "\n",
        "- Reductions allow us to perform efficient aggregations over arrays.\n",
        "- We can do aggregations over a single axis to collapse a single dimension.\n",
        "- Many built-in reductions (`mean`, `sum`, `min`, `max`, `median`, ...)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gXXERJ0Yw0VE"
      },
      "source": [
        "# Broadcasting"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wIV1D8M9w0VE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d41cc16c-e4cd-46c8-d01a-92a53e3613c8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Row:\n",
            "[1 2 3 4]\n",
            "Column:\n",
            "[[1]\n",
            " [2]\n",
            " [3]]\n"
          ]
        }
      ],
      "source": [
        "row = np.array([1, 2, 3, 4])\n",
        "column = np.array([[1], [2], [3]])\n",
        "print(\"Row:\\n\", row, sep='')\n",
        "print(\"Column:\\n\", column, sep='')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+58**"
      ],
      "metadata": {
        "id": "dTiFgt9bAuJo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "xs = np.array([30,45,65,88,1440])\n",
        "ys = np.array([[8], [3], [6]])"
      ],
      "metadata": {
        "id": "iLEIegDPAt-K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZQhHZKUBw0VF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65b4743c-e754-40de-b348-ace080a95ee7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2, 3, 4, 5],\n",
              "       [3, 4, 5, 6],\n",
              "       [4, 5, 6, 7]])"
            ]
          },
          "metadata": {},
          "execution_count": 434
        }
      ],
      "source": [
        "row + column"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+59**"
      ],
      "metadata": {
        "id": "AABEiDFkA7x2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "xs + ys"
      ],
      "metadata": {
        "id": "Lvo52grVA7nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f96def6a-504f-460d-c2e9-3177b06dcfbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  38,   53,   73,   96, 1448],\n",
              "       [  33,   48,   68,   91, 1443],\n",
              "       [  36,   51,   71,   94, 1446]])"
            ]
          },
          "metadata": {},
          "execution_count": 435
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nV7FNW82w0VF"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/broadcasting.png?raw=1\" alt=\"Drawing\" style=\"width: 60%;\"/></center>\n",
        "\n",
        "<h5>Source: http://www.scipy-lectures.org/_images/numpy_broadcasting.png</h5>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dG8tAwNww0VF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0dc64fc1-71f8-4453-92b4-0b2f7716d64e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data:\n",
            "[[ 0  1  2  3  4  5  6  7  8  9]\n",
            " [10 11 12 13 14 15 16 17 18 19]\n",
            " [20 21 22 23 24 25 26 27 28 29]]\n",
            "Mean:\n",
            "[10. 11. 12. 13. 14. 15. 16. 17. 18. 19.]\n",
            "Data - Mean:\n",
            "[[-10. -10. -10. -10. -10. -10. -10. -10. -10. -10.]\n",
            " [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.]\n",
            " [ 10.  10.  10.  10.  10.  10.  10.  10.  10.  10.]]\n"
          ]
        }
      ],
      "source": [
        "# Broadcasting is particularly useful in conjunction with reductions.\n",
        "print(\"Data:\\n\", data, sep='')\n",
        "print(\"Mean:\\n\", data.mean(axis=0), sep='')\n",
        "print(\"Data - Mean:\\n\", data - data.mean(axis=0), sep='')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+60**"
      ],
      "metadata": {
        "id": "OnGoFThuBE7o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(datos3 - datos3.mean(axis = 0))"
      ],
      "metadata": {
        "id": "Vz6DLBG9BEzI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4251703f-40bc-48eb-9094-1248b7ba85ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-22. -22. -22. -22. -22. -22. -22. -22. -22. -22. -22.]\n",
            " [-11. -11. -11. -11. -11. -11. -11. -11. -11. -11. -11.]\n",
            " [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.]\n",
            " [ 11.  11.  11.  11.  11.  11.  11.  11.  11.  11.  11.]\n",
            " [ 22.  22.  22.  22.  22.  22.  22.  22.  22.  22.  22.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v-LzrTf5w0VF"
      },
      "source": [
        "# Broadcasting Review\n",
        "\n",
        "- Numpy operations can work on arrays of different dimensions as long as the arrays' shapes are still \"compatible\".\n",
        "- Broadcasting works by \"tiling\" the smaller array along the missing dimension.\n",
        "- The result of a broadcasted operation is always at least as large in each dimension as the largest array in that dimension."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rdSeHdMsw0VG"
      },
      "source": [
        "# Numpy Review"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9o3Neg4tw0VG"
      },
      "source": [
        "- Numerical algorithms are slow in pure Python because the overhead dynamic dispatch dominates our runtime."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YEjQjowgw0VG"
      },
      "source": [
        "- Numpy solves this problem by:\n",
        "  1. Imposing additional restrictions on the contents of arrays.\n",
        "  2. Moving the inner loops of our algorithms into compiled C code."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KT9K49tCw0VG"
      },
      "source": [
        "- Using Numpy effectively often requires reworking an algorithms to use vectorized operations instead of for-loops, but the resulting operations are usually simpler, clearer, and faster than the pure Python equivalent."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7clYMj0yw0VG"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/unicorn.jpg?raw=1\" alt=\"Drawing\" style=\"width: 75%;\"/></center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MmKKbn10w0VG"
      },
      "source": [
        "Numpy is great for many things, but..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vBs3sbAfw0VH"
      },
      "source": [
        "- Sometimes our data is equipped with a natural set of **labels**:\n",
        "  - Dates/Times\n",
        "  - Stock Tickers\n",
        "  - Field Names (e.g. Open/High/Low/Close)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VVEFvj_0w0VH"
      },
      "source": [
        "- Sometimes we have **more than one type of data** that we want to keep grouped together.\n",
        "  - Tables with a mix of real-valued and categorical data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-HiNa13fw0VH"
      },
      "source": [
        "- Sometimes we have **missing** data, which we need to ignore, fill, or otherwise work around."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EPSlgsoSw0VH"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/panda-wrangling.gif?raw=1\" alt=\"Drawing\" style=\"width: 75%;\"/></center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e9d_yjmOw0VH"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/pandas_logo.png?raw=1\" alt=\"Drawing\" style=\"width: 75%;\"/></center>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zAHZw2aYw0VI"
      },
      "source": [
        "Pandas extends Numpy with more complex data structures:\n",
        "\n",
        "- `Series`: 1-dimensional, homogenously-typed, labelled array.\n",
        "- `DataFrame`: 2-dimensional, semi-homogenous, labelled table."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "992h2pchw0VI"
      },
      "source": [
        "Pandas also provides many utilities for: \n",
        "- Input/Output\n",
        "- Data Cleaning\n",
        "- Rolling Algorithms\n",
        "- Plotting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NF44cqdyw0VI"
      },
      "source": [
        "# Selection in Pandas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LKBCAnuuw0VI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fab6ff65-d6d4-4583-b089-b71091f7091f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    1\n",
              "b    2\n",
              "c    3\n",
              "d    4\n",
              "e    5\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 438
        }
      ],
      "source": [
        "s = pd.Series(index=['a', 'b', 'c', 'd', 'e'], data=[1, 2, 3, 4, 5])\n",
        "s"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+61**"
      ],
      "metadata": {
        "id": "7KXBrG02CX1L"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nMuQLSBkl0tO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos4 = pd.Series(index = ['w','x','y','z'], data = [1,5,10,15])\n",
        "datos4"
      ],
      "metadata": {
        "id": "eUiWf3mjCXoa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "96a59267-7cd1-4de9-93b3-5abbe92d9b40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "w     1\n",
              "x     5\n",
              "y    10\n",
              "z    15\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 439
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3x7U6nYBw0VI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5b6b07a2-21ea-4c21-b26b-ea98d38eec54"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The index is: Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\n",
            "The values are: [1 2 3 4 5]\n"
          ]
        }
      ],
      "source": [
        "# There are two pieces to a Series: the index and the values.\n",
        "print(\"The index is:\", s.index)\n",
        "print(\"The values are:\", s.values)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+62**"
      ],
      "metadata": {
        "id": "kVorxsnaDQ2f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(datos4.index)\n",
        "print(datos4.values)"
      ],
      "metadata": {
        "id": "XZoZ-GwFDQo5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2933e7dc-1825-4532-c73f-c42a946ccade"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['w', 'x', 'y', 'z'], dtype='object')\n",
            "[ 1  5 10 15]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c-2lJiXpw0VI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a50b485b-a8a4-4255-b17c-f432dccf979f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 442
        }
      ],
      "source": [
        "# We can look up values out of a Series by position...\n",
        "s.iloc[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+63**"
      ],
      "metadata": {
        "id": "9xeYjzPBEi3c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4.iloc[2]"
      ],
      "metadata": {
        "id": "dsLZQW-iEisP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80c76e8d-a836-48bc-f3bd-aee196a90b4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 443
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "06eOikdNw0VJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d755d140-d51b-4af4-ba67-6c7b6b8e8c7e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 444
        }
      ],
      "source": [
        "# ... or by label.\n",
        "s.loc['a']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+64**"
      ],
      "metadata": {
        "id": "c3S1W-rMEplG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4.loc['y']"
      ],
      "metadata": {
        "id": "RrvhJwVtEpVr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7b46919e-6d65-4aaf-e8bc-81274eb7979c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 445
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rTYqPM5Hw0VJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0673199f-69ed-44e3-8547-6fccd7da410c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    1\n",
              "b    2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 446
        }
      ],
      "source": [
        "# Slicing works as expected...\n",
        "s.iloc[:2]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "```\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "**My own example k+65**"
      ],
      "metadata": {
        "id": "KYO9qExvE0NF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4.iloc[1:5]"
      ],
      "metadata": {
        "id": "Nrkz1vpTE0Br",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a559419c-a61f-4137-b297-cf4b0170289b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "x     5\n",
              "y    10\n",
              "z    15\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 447
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ucaml59Iw0VJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58f2ca46-2137-4658-82d4-60318ec5394f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    1\n",
              "b    2\n",
              "c    3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 448
        }
      ],
      "source": [
        "# ...but it works with labels too!\n",
        "s.loc[:'c']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+66**"
      ],
      "metadata": {
        "id": "VMBSu1OaE7w3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4.loc[:'x']"
      ],
      "metadata": {
        "id": "aC_Ma7p9E7fL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61f5faad-0784-45be-f87e-2047a2fcfc34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "w    1\n",
              "x    5\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 449
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "liE-WPBWw0VJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2e651b6a-2d85-4248-d5ba-93de85fe35fa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    1\n",
              "e    5\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 450
        }
      ],
      "source": [
        "# Fancy indexing works the same as in numpy.\n",
        "s.iloc[[0, -1]]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+67**"
      ],
      "metadata": {
        "id": "KXDQ2DaYFELX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4.iloc[[2, -3]]"
      ],
      "metadata": {
        "id": "dFpPF-bxFD_d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af190d09-7558-4463-96f5-7181ebaef145"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "y    10\n",
              "x     5\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 451
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GWJv7CLJw0VK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0efccbc8-6b82-4d22-876c-f680837c8aca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "c    3\n",
              "d    4\n",
              "e    5\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 452
        }
      ],
      "source": [
        "# As does boolean masking.\n",
        "s.loc[s > 2]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+68**"
      ],
      "metadata": {
        "id": "EBbZRzsLFNOJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4.loc[datos4 > 2]"
      ],
      "metadata": {
        "id": "Ksr5q1kdFNBq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac8ce6e1-5fb0-4bea-9959-14fb96b58e8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "x     5\n",
              "y    10\n",
              "z    15\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 453
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5PLZMoXOw0VK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6f43e2ab-9d8d-4479-f1b2-87f21a062d00"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    10.0\n",
              "c    20.0\n",
              "d    30.0\n",
              "z    40.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 454
        }
      ],
      "source": [
        "# Element-wise operations are aligned by index.\n",
        "other_s = pd.Series({'a': 10.0, 'c': 20.0, 'd': 30.0, 'z': 40.0})\n",
        "other_s"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+69**"
      ],
      "metadata": {
        "id": "EYZDhbqhFa95"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos5 = pd.Series({'num' : 1, 'pi':3.145, 'tres':3})\n",
        "datos5"
      ],
      "metadata": {
        "id": "IBH464gGFaxS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ca47a2c-723e-47ff-f485-569fd1cf6f25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num     1.000\n",
              "pi      3.145\n",
              "tres    3.000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 455
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GfTExfmqw0VK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f1568f78-d06c-4366-9e6e-17071cf0fa6e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    11.0\n",
              "b     NaN\n",
              "c    23.0\n",
              "d    34.0\n",
              "e     NaN\n",
              "z     NaN\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 456
        }
      ],
      "source": [
        "s + other_s"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+70**"
      ],
      "metadata": {
        "id": "rXvwCbZ0FrgD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datos4 + datos5"
      ],
      "metadata": {
        "id": "CJbVu4PbFrSJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a658d52-730a-4d9b-e34e-b88ef51b3dd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num    NaN\n",
              "pi     NaN\n",
              "tres   NaN\n",
              "w      NaN\n",
              "x      NaN\n",
              "y      NaN\n",
              "z      NaN\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 457
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vQ3Xxfekw0VK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c9b737a-e5e5-4d20-c54d-ae84bb41e612"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    11.0\n",
              "b     0.0\n",
              "c    23.0\n",
              "d    34.0\n",
              "e     0.0\n",
              "z     0.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 458
        }
      ],
      "source": [
        "# We can fill in missing values with fillna().\n",
        "(s + other_s).fillna(0.0)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+71**"
      ],
      "metadata": {
        "id": "C8ewl9ckG-lK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(datos4 + datos5).fillna(5)"
      ],
      "metadata": {
        "id": "lME53YoPHBxd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "401b71e8-05b9-4ff6-f58b-fd36205e6095"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num     5.0\n",
              "pi      5.0\n",
              "tres    5.0\n",
              "w       5.0\n",
              "x       5.0\n",
              "y       5.0\n",
              "z       5.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 459
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EAbecmTQw0VK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a6956ed5-2a22-4413-dc67-49bd27240327"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-460-1979ce6f1d95>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Most real datasets are read in from an external file format.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'AAPL.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparse_dates\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex_col\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'AAPL.csv'"
          ]
        }
      ],
      "source": [
        "# Most real datasets are read in from an external file format.\n",
        "aapl = pd.read_csv('AAPL.csv', parse_dates=['Date'], index_col='Date')\n",
        "aapl.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "```\n",
        "\n",
        "**My own example k+72**\n"
      ],
      "metadata": {
        "id": "o0u-PYbpBW0r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "datosgov = pd.read_csv('https://www.datos.gov.co/resource/gt2j-8ykr.csv')\n",
        "datosgov.head()\n"
      ],
      "metadata": {
        "id": "IWfgebf8Ba38",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "outputId": "8b6b1400-4eb6-4473-82c6-45d048c1fb2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     fecha_reporte_web  id_de_caso fecha_de_notificaci_n  departamento  \\\n",
              "0  2021-03-04 00:00:00     2265685   2021-03-02 00:00:00            11   \n",
              "1  2021-03-04 00:00:00     2265686   2021-03-02 00:00:00            11   \n",
              "2  2021-03-04 00:00:00     2265687   2021-03-02 00:00:00            11   \n",
              "3  2021-03-04 00:00:00     2265688   2021-03-02 00:00:00            11   \n",
              "4  2021-03-04 00:00:00     2265689   2021-03-02 00:00:00            11   \n",
              "\n",
              "  departamento_nom  ciudad_municipio ciudad_municipio_nom  edad  \\\n",
              "0           BOGOTA             11001               BOGOTA    49   \n",
              "1           BOGOTA             11001               BOGOTA    49   \n",
              "2           BOGOTA             11001               BOGOTA    51   \n",
              "3           BOGOTA             11001               BOGOTA    51   \n",
              "4           BOGOTA             11001               BOGOTA    51   \n",
              "\n",
              "   unidad_medida sexo  ... pais_viajo_1_cod pais_viajo_1_nom  recuperado  \\\n",
              "0              1    M  ...              NaN              NaN  Recuperado   \n",
              "1              1    M  ...              NaN              NaN  Recuperado   \n",
              "2              1    F  ...              NaN              NaN  Recuperado   \n",
              "3              1    F  ...              NaN              NaN  Recuperado   \n",
              "4              1    F  ...              NaN              NaN  Recuperado   \n",
              "\n",
              "   fecha_inicio_sintomas  fecha_muerte    fecha_diagnostico  \\\n",
              "0    2021-02-25 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "1    2021-02-23 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "2    2021-02-24 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "3    2021-02-27 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "4    2021-03-01 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "\n",
              "      fecha_recuperado tipo_recuperacion per_etn_ nom_grupo_  \n",
              "0  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "1  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "2  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "3  2021-03-13 00:00:00            Tiempo        6        NaN  \n",
              "4  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ebc1d3bc-91ea-4ca0-ade5-9e8a31b1d049\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fecha_reporte_web</th>\n",
              "      <th>id_de_caso</th>\n",
              "      <th>fecha_de_notificaci_n</th>\n",
              "      <th>departamento</th>\n",
              "      <th>departamento_nom</th>\n",
              "      <th>ciudad_municipio</th>\n",
              "      <th>ciudad_municipio_nom</th>\n",
              "      <th>edad</th>\n",
              "      <th>unidad_medida</th>\n",
              "      <th>sexo</th>\n",
              "      <th>...</th>\n",
              "      <th>pais_viajo_1_cod</th>\n",
              "      <th>pais_viajo_1_nom</th>\n",
              "      <th>recuperado</th>\n",
              "      <th>fecha_inicio_sintomas</th>\n",
              "      <th>fecha_muerte</th>\n",
              "      <th>fecha_diagnostico</th>\n",
              "      <th>fecha_recuperado</th>\n",
              "      <th>tipo_recuperacion</th>\n",
              "      <th>per_etn_</th>\n",
              "      <th>nom_grupo_</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265685</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-25 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265686</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-23 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265687</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-24 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265688</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-27 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-13 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265689</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-03-01 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebc1d3bc-91ea-4ca0-ade5-9e8a31b1d049')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ebc1d3bc-91ea-4ca0-ade5-9e8a31b1d049 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ebc1d3bc-91ea-4ca0-ade5-9e8a31b1d049');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 462
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4YLV0lWgw0VL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "outputId": "3cbad3ac-5fef-4e07-e9c4-3017b5d8b449"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-464-ed5a2e5fe79f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Slicing generalizes to two dimensions as you'd expect:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0maapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'iloc'"
          ]
        }
      ],
      "source": [
        "# Slicing generalizes to two dimensions as you'd expect:\n",
        "aapl=2\n",
        "aapl.iloc[:2, :2]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example k+73**"
      ],
      "metadata": {
        "id": "Kly8fBnMEXgu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datosgov.iloc[:4, :4]"
      ],
      "metadata": {
        "id": "LvSACtYfEjX_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "83c0c7d3-7a34-4b1a-ae3a-d111e461b574"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     fecha_reporte_web  id_de_caso fecha_de_notificaci_n  departamento\n",
              "0  2021-03-04 00:00:00     2265685   2021-03-02 00:00:00            11\n",
              "1  2021-03-04 00:00:00     2265686   2021-03-02 00:00:00            11\n",
              "2  2021-03-04 00:00:00     2265687   2021-03-02 00:00:00            11\n",
              "3  2021-03-04 00:00:00     2265688   2021-03-02 00:00:00            11"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43cb33f5-55b8-46ee-bd12-d0f624545bea\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fecha_reporte_web</th>\n",
              "      <th>id_de_caso</th>\n",
              "      <th>fecha_de_notificaci_n</th>\n",
              "      <th>departamento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265685</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265686</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265687</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265688</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43cb33f5-55b8-46ee-bd12-d0f624545bea')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-43cb33f5-55b8-46ee-bd12-d0f624545bea button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-43cb33f5-55b8-46ee-bd12-d0f624545bea');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 465
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xZL_dvNow0VL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "outputId": "5cc2c31b-8a1f-4c37-ea66-874c644a8253"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-466-949c877c6abd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'2010-02-01'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'2010-02-04'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Close'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Volume'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'loc'"
          ]
        }
      ],
      "source": [
        "aapl.loc[pd.Timestamp('2010-02-01'):pd.Timestamp('2010-02-04'), ['Close', 'Volume']]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HVUUijC_w0VL"
      },
      "source": [
        "# Rolling Operations"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lAxYuUY3w0VP"
      },
      "source": [
        "<center><img src=\"https://github.com/gruizo/MetNumUN2022II/blob/main/lab2/images/rolling.gif?raw=1\" alt=\"Drawing\" style=\"width: 75%;\"/></center>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HZaHEKpow0VP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "outputId": "d253db3b-79c0-4079-f2f0-5f0cea277204"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-467-3bc162502568>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Close'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Adj Close'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'rolling'"
          ]
        }
      ],
      "source": [
        "aapl.rolling(5)[['Close', 'Adj Close']].mean().plot();"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**My own example k+75**"
      ],
      "metadata": {
        "id": "Md7lfka2F2h4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datosgov.rolling(5)[['id_de_caso', 'ciudad_municipio']].mean().plot();"
      ],
      "metadata": {
        "id": "Utdmy3r9F7h-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k8QrYTU_w0VQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "343f601c-59bb-4228-8505-c0a663b25a4b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-468-473f9baf0298>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Drop `Volume`, since it's way bigger than everything else.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Volume'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'2W'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'drop'"
          ]
        }
      ],
      "source": [
        "# Drop `Volume`, since it's way bigger than everything else.\n",
        "aapl.drop('Volume', axis=1).resample('2W').max().plot();"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CyHibXuvw0VQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "9d7789a2-4d0e-43a5-e9a9-7651e346953b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-469-9bf9e296622a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 30-day rolling exponentially-weighted stddev of returns.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maapl\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Close'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpct_change\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mewm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspan\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object is not subscriptable"
          ]
        }
      ],
      "source": [
        "# 30-day rolling exponentially-weighted stddev of returns.\n",
        "aapl['Close'].pct_change().ewm(span=30).std().plot();"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**My own example 77**"
      ],
      "metadata": {
        "id": "Tp4AbSglNAzr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datosgov['edad'].pct_change().ewm(span=40).std().plot();"
      ],
      "metadata": {
        "id": "jRgqoFlAG8qK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "outputId": "bf117a2d-2022-4f1a-99eb-bbeaa2775d38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JFeWshndw0VQ"
      },
      "source": [
        "# \"Real World\" Data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/ssanderson/pydata-toolbox"
      ],
      "metadata": {
        "id": "7Lde1PATKxSs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75b9f0a7-55a3-409d-87c0-97af77498530"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'pydata-toolbox'...\n",
            "remote: Enumerating objects: 85, done.\u001b[K\n",
            "remote: Counting objects: 100% (33/33), done.\u001b[K\n",
            "remote: Compressing objects: 100% (23/23), done.\u001b[K\n",
            "remote: Total 85 (delta 20), reused 17 (delta 10), pack-reused 52\u001b[K\n",
            "Unpacking objects: 100% (85/85), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FvEiFkMDw0VQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "outputId": "de70e6e9-4ff4-4c5c-8fbb-d1830742000c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-474-4c63259c021c>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    from demos.avocados\u001b[0m\n\u001b[0m                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "from demos.avocados \n",
        "import read_avocadata\n",
        "\n",
        "avocados = read_avocadata('2014', '2016')\n",
        "avocados.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YE41TefLw0VQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "f6f4803b-c51a-458c-c892-f0a547145083"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-475-9507cc6facd9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Unlike numpy arrays, pandas DataFrames can have a different dtype for each column.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mavocados\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'avocados' is not defined"
          ]
        }
      ],
      "source": [
        "# Unlike numpy arrays, pandas DataFrames can have a different dtype for each column.\n",
        "avocados.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ugMuFafYw0VR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "outputId": "bba37f67-d8be-4785-fa33-4419c3c304b5"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-476-3ba9d3219aee>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# What's the regional average price of a HASS avocado every day?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mhass\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mavocados\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mavocados\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariety\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'HASS'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mhass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Region'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Weighted Avg Price'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mffill\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'avocados' is not defined"
          ]
        }
      ],
      "source": [
        "# What's the regional average price of a HASS avocado every day?\n",
        "hass = avocados[avocados.Variety == 'HASS']\n",
        "hass.groupby(['Date', 'Region'])['Weighted Avg Price'].mean().unstack().ffill().plot();"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "Kwvaco0Xw0VR"
      },
      "outputs": [],
      "source": [
        "def _organic_spread(group):\n",
        "\n",
        "    if len(group.columns) != 2:\n",
        "        return pd.Series(index=group.index, data=0.0)\n",
        "    \n",
        "    is_organic = group.columns.get_level_values('Organic').values.astype(bool)\n",
        "    organics = group.loc[:, is_organic].squeeze()\n",
        "    non_organics = group.loc[:, ~is_organic].squeeze()\n",
        "    diff = organics - non_organics\n",
        "    return diff\n",
        "\n",
        "def organic_spread_by_region(df):\n",
        "    \"\"\"What's the difference between the price of an organic \n",
        "    and non-organic avocado within each region?\n",
        "    \"\"\"\n",
        "    return (\n",
        "        df\n",
        "        .set_index(['Date', 'Region', 'Organic'])\n",
        "         ['Weighted Avg Price']\n",
        "        .unstack(level=['Region', 'Organic'])\n",
        "        .ffill()\n",
        "        .groupby(level='Region', axis=1)\n",
        "        .apply(_organic_spread)\n",
        "    )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ourJ_EwUw0VR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "outputId": "b26e7d97-e5de-4f9a-d7d9-749d12bda9d1"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-479-73720b84c77c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0morganic_spread_by_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhass\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Daily Regional Organic Spread\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox_to_anchor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'hass' is not defined"
          ]
        }
      ],
      "source": [
        "organic_spread_by_region(hass).plot();\n",
        "plt.gca().set_title(\"Daily Regional Organic Spread\");\n",
        "plt.legend(bbox_to_anchor=(1, 1));"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3S74Irotw0VR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "d54c94b6-f75d-489b-91bb-33e96d8bb5a4"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-480-a30e8b57c682>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mspread_correlation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0morganic_spread_by_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhass\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mspread_correlation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'hass' is not defined"
          ]
        }
      ],
      "source": [
        "spread_correlation = organic_spread_by_region(hass).corr()\n",
        "spread_correlation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a_VV3KVAw0VR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "8c85187a-d3c1-48bd-dad7-f20557eff3b7"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-481-c38db272c84c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mseaborn\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclustermap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspread_correlation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0maxes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'spread_correlation' is not defined"
          ]
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "grid = sns.clustermap(spread_correlation, annot=True)\n",
        "fig = grid.fig\n",
        "axes = fig.axes\n",
        "ax = axes[2]\n",
        "ax.set_xticklabels(ax.get_xticklabels(), rotation=45);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AAu_XZmcw0VS"
      },
      "source": [
        "\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "```\n",
        "\n",
        "# Pandas Review\n",
        "\n",
        "- Pandas extends numpy with more complex datastructures and algorithms.\n",
        "- If you understand numpy, you understand 90% of pandas.\n",
        "- `groupby`, `set_index`, and `unstack` are powerful tools for working with categorical data.\n",
        "- Avocado prices are surprisingly interesting :)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Nueva sección Mis prorpios ejemplos con informacions de datos gov"
      ],
      "metadata": {
        "id": "1lBCdovYKaoE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "covidcasos= pd.read_csv('https://www.datos.gov.co/resource/gt2j-8ykr.csv')\n",
        "covidcasos.head()"
      ],
      "metadata": {
        "id": "txCdz5aXKv6M",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "outputId": "a7409830-dabf-4bec-ebfc-20fe1f1b73f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     fecha_reporte_web  id_de_caso fecha_de_notificaci_n  departamento  \\\n",
              "0  2021-03-04 00:00:00     2265685   2021-03-02 00:00:00            11   \n",
              "1  2021-03-04 00:00:00     2265686   2021-03-02 00:00:00            11   \n",
              "2  2021-03-04 00:00:00     2265687   2021-03-02 00:00:00            11   \n",
              "3  2021-03-04 00:00:00     2265688   2021-03-02 00:00:00            11   \n",
              "4  2021-03-04 00:00:00     2265689   2021-03-02 00:00:00            11   \n",
              "\n",
              "  departamento_nom  ciudad_municipio ciudad_municipio_nom  edad  \\\n",
              "0           BOGOTA             11001               BOGOTA    49   \n",
              "1           BOGOTA             11001               BOGOTA    49   \n",
              "2           BOGOTA             11001               BOGOTA    51   \n",
              "3           BOGOTA             11001               BOGOTA    51   \n",
              "4           BOGOTA             11001               BOGOTA    51   \n",
              "\n",
              "   unidad_medida sexo  ... pais_viajo_1_cod pais_viajo_1_nom  recuperado  \\\n",
              "0              1    M  ...              NaN              NaN  Recuperado   \n",
              "1              1    M  ...              NaN              NaN  Recuperado   \n",
              "2              1    F  ...              NaN              NaN  Recuperado   \n",
              "3              1    F  ...              NaN              NaN  Recuperado   \n",
              "4              1    F  ...              NaN              NaN  Recuperado   \n",
              "\n",
              "   fecha_inicio_sintomas  fecha_muerte    fecha_diagnostico  \\\n",
              "0    2021-02-25 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "1    2021-02-23 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "2    2021-02-24 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "3    2021-02-27 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "4    2021-03-01 00:00:00           NaN  2021-03-03 00:00:00   \n",
              "\n",
              "      fecha_recuperado tipo_recuperacion per_etn_ nom_grupo_  \n",
              "0  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "1  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "2  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "3  2021-03-13 00:00:00            Tiempo        6        NaN  \n",
              "4  2021-03-16 00:00:00            Tiempo        6        NaN  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c9b8d2f-6000-41f6-8940-2f6b9c250ad3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fecha_reporte_web</th>\n",
              "      <th>id_de_caso</th>\n",
              "      <th>fecha_de_notificaci_n</th>\n",
              "      <th>departamento</th>\n",
              "      <th>departamento_nom</th>\n",
              "      <th>ciudad_municipio</th>\n",
              "      <th>ciudad_municipio_nom</th>\n",
              "      <th>edad</th>\n",
              "      <th>unidad_medida</th>\n",
              "      <th>sexo</th>\n",
              "      <th>...</th>\n",
              "      <th>pais_viajo_1_cod</th>\n",
              "      <th>pais_viajo_1_nom</th>\n",
              "      <th>recuperado</th>\n",
              "      <th>fecha_inicio_sintomas</th>\n",
              "      <th>fecha_muerte</th>\n",
              "      <th>fecha_diagnostico</th>\n",
              "      <th>fecha_recuperado</th>\n",
              "      <th>tipo_recuperacion</th>\n",
              "      <th>per_etn_</th>\n",
              "      <th>nom_grupo_</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265685</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-25 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265686</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-23 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265687</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-24 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265688</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-02-27 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-13 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-03-04 00:00:00</td>\n",
              "      <td>2265689</td>\n",
              "      <td>2021-03-02 00:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTA</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Recuperado</td>\n",
              "      <td>2021-03-01 00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-03 00:00:00</td>\n",
              "      <td>2021-03-16 00:00:00</td>\n",
              "      <td>Tiempo</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c9b8d2f-6000-41f6-8940-2f6b9c250ad3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2c9b8d2f-6000-41f6-8940-2f6b9c250ad3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2c9b8d2f-6000-41f6-8940-2f6b9c250ad3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 482
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**My own example k+77**"
      ],
      "metadata": {
        "id": "sgl62aFxNEQs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "covidcasos.dtypes\n"
      ],
      "metadata": {
        "id": "NgciBM6tLNY0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99b177a8-5ff0-46bc-dd61-2229f1dca44e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fecha_reporte_web         object\n",
              "id_de_caso                 int64\n",
              "fecha_de_notificaci_n     object\n",
              "departamento               int64\n",
              "departamento_nom          object\n",
              "ciudad_municipio           int64\n",
              "ciudad_municipio_nom      object\n",
              "edad                       int64\n",
              "unidad_medida              int64\n",
              "sexo                      object\n",
              "fuente_tipo_contagio      object\n",
              "ubicacion                 object\n",
              "estado                    object\n",
              "pais_viajo_1_cod         float64\n",
              "pais_viajo_1_nom         float64\n",
              "recuperado                object\n",
              "fecha_inicio_sintomas     object\n",
              "fecha_muerte              object\n",
              "fecha_diagnostico         object\n",
              "fecha_recuperado          object\n",
              "tipo_recuperacion         object\n",
              "per_etn_                   int64\n",
              "nom_grupo_                object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 483
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**My own example k+78**"
      ],
      "metadata": {
        "id": "I4D18KMUNGJC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "covidcasos.groupby(['sexo','recuperado'])['departamento'].mean().unstack().ffill().plot();"
      ],
      "metadata": {
        "id": "191V8mGCLOLp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "outputId": "50bb1938-8c26-40c9-e8c7-591d71953225"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**My own example 80**"
      ],
      "metadata": {
        "id": "IbgxlSKKNIS5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "covidcasos.groupby(['id_de_caso'])['edad'].mean().ffill().plot();"
      ],
      "metadata": {
        "id": "3SE4Wzj9LRH2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "591141cb-e0ef-4024-8828-933de2f37e78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OZTjmOgzw0VS"
      },
      "source": [
        "# Thanks!"
      ]
    }
  ],
  "metadata": {
    "celltoolbar": "Slideshow",
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    },
    "livereveal": {
      "start_slideshow_at": "selected"
    },
    "name": "Main.ipynb",
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "RxP_mALuw0Uv",
        "J9hBM6Ucw0Uw",
        "MRLnzOvew0Uy",
        "RHj-B-J3w0U2",
        "01a9Fiimw0U3",
        "kuqSu4Guw0U7",
        "eWWvZ_kxw0U8",
        "ekq11cehw0U9",
        "WX1cWNeOw0U9",
        "954pPNIkw0VB",
        "_S1i-H_bw0VB",
        "HhAchLC8w0VE",
        "v-LzrTf5w0VF",
        "AAu_XZmcw0VS",
        "OZTjmOgzw0VS"
      ],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}